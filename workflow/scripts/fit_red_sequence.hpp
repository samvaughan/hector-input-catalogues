
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace fit_red_sequence_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 37> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 9, column 2 to column 19)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 10, column 2 to column 24)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 11, column 2 to column 29)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 13, column 2 to column 38)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 15, column 2 to column 19)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 44, column 2 to column 18)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 45, column 2 to column 19)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 46, column 2 to column 19)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 50, column 4 to column 13)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 51, column 4 to column 13)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 53, column 4 to column 72)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 54, column 4 to column 73)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 57, column 4 to column 102)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 58, column 4 to column 104)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 59, column 4 to column 44)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 48, column 16 to line 60, column 3)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 48, column 2 to line 60, column 3)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 20, column 2 to column 32)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 21, column 2 to column 33)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 22, column 2 to column 36)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 23, column 2 to column 36)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 25, column 2 to column 32)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 26, column 2 to column 30)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 28, column 2 to column 28)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 30, column 2 to column 20)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 33, column 2 to line 36, column 22)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 32, column 16 to line 38, column 3)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 32, column 2 to line 38, column 3)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 2, column 2 to column 8)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 3, column 9 to column 10)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 3, column 2 to column 14)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 4, column 9 to column 10)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 4, column 2 to column 14)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 44, column 9 to column 10)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 45, column 9 to column 10)",
 " (in '/Users/samvaughan/Science/Hector/Targets/HectorInputCatalogues/workflow/scripts/fit_red_sequence.stan', line 46, column 9 to column 10)"};




class fit_red_sequence_model final : public model_base_crtp<fit_red_sequence_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> x_data__;
  Eigen::Matrix<double, -1, 1> y_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
 
 public:
  ~fit_red_sequence_model() { }
  
  inline std::string model_name() const final { return "fit_red_sequence_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  fit_red_sequence_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "fit_red_sequence_model_namespace::fit_red_sequence_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 29;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 30;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 31;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x_data__.data(), N);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 31;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 31;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 31;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 32;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_data__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 33;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 33;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("y_red", "N", N);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("y_blue", "N", N);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("log_Pr", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 2 + 2 + 2 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "fit_red_sequence_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> slopes =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 1;
      slopes = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<local_scalar_t__, -1, 1> intercepts =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 2;
      intercepts = in__.template read_constrain_ordered<
                     Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                     lp__, 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> scatter =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 3;
      scatter = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                  lp__, 2);
      local_scalar_t__ mixture_prob = DUMMY_VAR__;
      current_statement__ = 4;
      mixture_prob = in__.template read_constrain_lub<local_scalar_t__, 
                       jacobian__>(0, 1, lp__);
      local_scalar_t__ nu = DUMMY_VAR__;
      current_statement__ = 5;
      nu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(1,
             lp__);
      {
        current_statement__ = 18;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(slopes, "slopes", stan::model::index_uni(1)),
            0.07, 0.1));
        current_statement__ = 19;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(slopes, "slopes", stan::model::index_uni(2)),
            0.00, 0.05));
        current_statement__ = 20;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(intercepts, "intercepts",
              stan::model::index_uni(1)), 0.6, 0.05));
        current_statement__ = 21;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(intercepts, "intercepts",
              stan::model::index_uni(2)), 0.8, 0.05));
        current_statement__ = 22;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(scatter, "scatter",
              stan::model::index_uni(1)), 0.1, 0.2));
        current_statement__ = 23;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(scatter, "scatter",
              stan::model::index_uni(2)), 0, 0.1));
        current_statement__ = 24;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(mixture_prob, 2, 2));
        current_statement__ = 25;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(nu, 2, 0.1));
        current_statement__ = 28;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 26;
          lp_accum__.add(
            stan::math::log_mix(mixture_prob,
              stan::math::student_t_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)), nu,
                ((stan::model::rvalue(slopes, "slopes",
                    stan::model::index_uni(1)) *
                   stan::model::rvalue(x, "x", stan::model::index_uni(i))) +
                  stan::model::rvalue(intercepts, "intercepts",
                    stan::model::index_uni(1))),
                stan::model::rvalue(scatter, "scatter",
                  stan::model::index_uni(1))),
              stan::math::student_t_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)), nu,
                ((stan::model::rvalue(slopes, "slopes",
                    stan::model::index_uni(2)) *
                   stan::model::rvalue(x, "x", stan::model::index_uni(i))) +
                  stan::model::rvalue(intercepts, "intercepts",
                    stan::model::index_uni(2))),
                stan::model::rvalue(scatter, "scatter",
                  stan::model::index_uni(2)))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "fit_red_sequence_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> slopes =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      slopes = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<double, -1, 1> intercepts =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      intercepts = in__.template read_constrain_ordered<
                     Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                     lp__, 2);
      Eigen::Matrix<double, -1, 1> scatter =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      scatter = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                  lp__, 2);
      double mixture_prob = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      mixture_prob = in__.template read_constrain_lub<local_scalar_t__, 
                       jacobian__>(0, 1, lp__);
      double nu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      nu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(1,
             lp__);
      out__.write(slopes);
      out__.write(intercepts);
      out__.write(scatter);
      out__.write(mixture_prob);
      out__.write(nu);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> y_red =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> y_blue =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_Pr =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      for (int i = 1; i <= N; ++i) {
        double lp1 = std::numeric_limits<double>::quiet_NaN();
        double lp2 = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 11;
        stan::model::assign(y_red,
          stan::math::normal_rng(
            ((stan::model::rvalue(slopes, "slopes",
                stan::model::index_uni(1)) *
               stan::model::rvalue(x, "x", stan::model::index_uni(i))) +
              stan::model::rvalue(intercepts, "intercepts",
                stan::model::index_uni(1))),
            stan::model::rvalue(scatter, "scatter",
              stan::model::index_uni(1)), base_rng__),
          "assigning variable y_red", stan::model::index_uni(i));
        current_statement__ = 12;
        stan::model::assign(y_blue,
          stan::math::normal_rng(
            ((stan::model::rvalue(slopes, "slopes",
                stan::model::index_uni(2)) *
               stan::model::rvalue(x, "x", stan::model::index_uni(i))) +
              stan::model::rvalue(intercepts, "intercepts",
                stan::model::index_uni(2))),
            stan::model::rvalue(scatter, "scatter",
              stan::model::index_uni(2)), base_rng__),
          "assigning variable y_blue", stan::model::index_uni(i));
        current_statement__ = 13;
        lp1 = (stan::math::log(mixture_prob) +
                stan::math::student_t_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)), nu,
                  ((stan::model::rvalue(slopes, "slopes",
                      stan::model::index_uni(1)) *
                     stan::model::rvalue(x, "x", stan::model::index_uni(i)))
                    +
                    stan::model::rvalue(intercepts, "intercepts",
                      stan::model::index_uni(1))),
                  stan::model::rvalue(scatter, "scatter",
                    stan::model::index_uni(1))));
        current_statement__ = 14;
        lp2 = (stan::math::log1m(mixture_prob) +
                stan::math::student_t_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)), nu,
                  ((stan::model::rvalue(slopes, "slopes",
                      stan::model::index_uni(2)) *
                     stan::model::rvalue(x, "x", stan::model::index_uni(i)))
                    +
                    stan::model::rvalue(intercepts, "intercepts",
                      stan::model::index_uni(2))),
                  stan::model::rvalue(scatter, "scatter",
                    stan::model::index_uni(2))));
        current_statement__ = 15;
        stan::model::assign(log_Pr,
          (lp1 - stan::math::log_sum_exp(lp1, lp2)),
          "assigning variable log_Pr", stan::model::index_uni(i));
      }
      out__.write(y_red);
      out__.write(y_blue);
      out__.write(log_Pr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> slopes =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(slopes, in__.read<local_scalar_t__>(),
          "assigning variable slopes", stan::model::index_uni(sym1__));
      }
      out__.write(slopes);
      Eigen::Matrix<local_scalar_t__, -1, 1> intercepts =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(intercepts, in__.read<local_scalar_t__>(),
          "assigning variable intercepts", stan::model::index_uni(sym1__));
      }
      out__.write_free_ordered(intercepts);
      Eigen::Matrix<local_scalar_t__, -1, 1> scatter =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(scatter, in__.read<local_scalar_t__>(),
          "assigning variable scatter", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, scatter);
      local_scalar_t__ mixture_prob = DUMMY_VAR__;
      mixture_prob = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, mixture_prob);
      local_scalar_t__ nu = DUMMY_VAR__;
      nu = in__.read<local_scalar_t__>();
      out__.write_free_lb(1, nu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"slopes", "intercepts", "scatter",
      "mixture_prob", "nu", "y_red", "y_blue", "log_Pr"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "slopes" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "intercepts" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "scatter" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mixture_prob");
    param_names__.emplace_back(std::string() + "nu");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_red" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_blue" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_Pr" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "slopes" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "intercepts" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "scatter" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mixture_prob");
    param_names__.emplace_back(std::string() + "nu");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_red" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_blue" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_Pr" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"slopes\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"intercepts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"scatter\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"mixture_prob\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_red\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_blue\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_Pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"slopes\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"intercepts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"scatter\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"mixture_prob\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_red\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_blue\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_Pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((2 + 2) + 2) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((N + N) + N);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((2 + 2) + 2) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((N + N) + N);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"slopes", "intercepts",
      "scatter", "mixture_prob", "nu"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{2, 2, 
       2, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = fit_red_sequence_model_namespace::fit_red_sequence_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return fit_red_sequence_model_namespace::profiles__;
}

#endif


