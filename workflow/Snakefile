"""
Take the master input catalogues for Hector and turn them into catalogues which we can run the target selection on.

For WAVES, this means:

* Matching the photmetric catalogues to our redshifts
* Adding the correct magnitude columns
* Removing the SAMI galaxies from WAVES North
* Removing objects classed as "star" (if any exist)

For the Clusters, this means

* Matching to our redshift catalogues

These final catalogues should then be used by the Target Selection code.
"""
from pathlib import Path

# The three master regions for our Hector observations
master_regions = ["WAVES_S", "WAVES_N", "HectorClusters"]

# The smaller Hector Survey fields
hector_survey_regions = [
    "G23",
    "H01",
    "H03",
    "G12",
    "G15",
    "A0085",
    "A0119",
    "A0151",
    "A2399",
    "A3158",
    "A3266",
    "A3376",
    "A3391_A3395",
    "A3667",
    "A3716",
]


# The fields we've observed redshifts from
fields = [
    "H01",
    "H03",
    "A3391",
    "A3395",
    "A3667",
    "A3716",
    "A3376",
    "G09",
    "G12",
    "G15",
    "A0119",
    "A151",
]


def get_all_redshift_observations(wildcards):
    """
    Collect all the Hector Redshift Survey observations
    """
    all_redshift_files = Path("resources/HRS_Redshift_Observations").glob("*.fits")
    return all_redshift_files


rule all:
    input:
        hrs_redshift_catalogue="results/Redshift_Cats/all_2dF_observations.parquet",
        WAVES_N_final_input_catalogue="results/FinalInputCatalogues/WAVES_N_final_input.parquet",
        WAVES_S_final_input_catalogue="results/FinalInputCatalogues/WAVES_S_final_input.parquet",
        cluster_final_input_catalogue="results/FinalInputCatalogues/HectorClusters_final_input.parquet",
        target_selection_catalogue=expand(
            "results/TargetSelectedMasterCatalogues/{master_region}/{master_region}_master_target_selected.parquet",
            master_region=master_regions,
        ),
        region_catalogues=expand(),


rule make_redshift_catalogue_from_2dF_obs:
    message:
        "Making the master catalogue of redshifts from the Hector Redshift Survey"
    input:
        redshift_observations=get_all_redshift_observations,
    output:
        hrs_redshift_catalogue=rules.all.input.hrs_redshift_catalogue,
    params:
        all_field_names=fields,
    script:
        "scripts/make_redshift_catalogue_from_observations.py"


rule prepare_WAVES_catalogue:
    message:
        "Preparing the WAVES catalogue"
    input:
        WAVES_S_input="resources/InitialInputCatalogues/WAVES_S_Hector.parquet",
        WAVES_N_input="resources/InitialInputCatalogues/WAVES_N_Hector.parquet",
        observed_redshift_catalogue=rules.make_redshift_catalogue_from_2dF_obs.output.hrs_redshift_catalogue,
        exisiting_redshift_catalogue="resources/Previous_Redshift_Cats/hemispec.v0.91recommended.parquet",
        SAMI_catalogue="resources/SAMI_catalogue/jvds_stelkin_cat_v012_mge_seecorr_kh20_v260421_private.fits",
    params:
        sep_constraint_arcsec=3.0,
    output:
        final_WAVES_N_catalogue=rules.all.input.WAVES_N_final_input_catalogue,
        final_WAVES_S_catalogue=rules.all.input.WAVES_S_final_input_catalogue,
    script:
        "scripts/prepare_WAVES_catalogues.py"


rule prepare_cluster_catalogue:
    message:
        "Prepare the Cluster catalogue"
    input:
        input_cluster_catalogue="resources/InitialInputCatalogues/COMBINED_ApMatch_MSTARV2.5_MattOwers_310123.parquet",
        observed_redshift_catalogue=rules.make_redshift_catalogue_from_2dF_obs.output.hrs_redshift_catalogue,
        exisiting_redshift_catalogue="resources/Previous_Redshift_Cats/hemispec.v0.91recommended.parquet",
    params:
        sep_constraint_arcsec=3.0,
    output:
        final_cluster_catalogue=rules.all.input.cluster_final_input_catalogue,
    script:
        "scripts/prepare_cluster_catalogue.py"


rule run_target_selection:
    message:
        "Run the target selection on an input catalogue"
    input:
        target_selection_config_file="resources/TS_config_files/{master_region}_TS_config.yaml",
        input_catalogue="results/FinalInputCatalogues/{master_region}_final_input.parquet",
    output:
        target_selection_plot="results/TargetSelectedMasterCatalogues/{master_region}/{master_region}_target_selection.png",
        master_target_selected_catalogue="results/TargetSelectedMasterCatalogues/{master_region}/{master_region}_master_target_selected.parquet",
    script:
        "scripts/run_target_selection.py"
